# some boiler plate generated by chat gpt
name: CI Workflow for Snakemake and pytest

on:
  push:
    branches:
      - main  # Trigger the workflow when pushing to the main branch
      - py-tests # when pushing to py-tests branch for dev
  pull_request:
    branches:
      - main  # Trigger on pull requests to main branch

jobs:
  run-tests:
    runs-on: ubuntu-latest  # Set the environment to Ubuntu

    steps:
    # Step 1: Checkout the repository
    - uses: actions/checkout@v4

    # Step 2: Install Miniforge (no env creation here)
    - name: Setup Miniforge
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        installation-dir: ${HOME}/miniforge3
        use-mamba: true
        auto-activate-base: true
        activate-environment: base
        channels: conda-forge,bioconda
        channel-priority: strict
        pkgs-dirs: ${HOME}/.conda/pkgs

    # Step 3: Restore full Conda environment cache AFTER setup
    - name: Restore Conda env cache
      id: env-cache
      uses: actions/cache@v4
      with:
        path: |
          ${HOME}/miniforge3/envs/pypsa-china
          ${HOME}/.conda/pkgs
          ${HOME}/.cache/mamba
        key: ${{ runner.os }}-conda-env-${{ hashFiles('workflow/envs/environment.yaml') }}

    # Step 4: Create env only if cache miss
    - name: Create env
      if: steps.env-cache.outputs.cache-hit != 'true'
      shell: bash -el {0}
      run: |
        conda config --add envs_dirs ${HOME}/miniforge3/envs
        mamba env create -n pypsa-china -f workflow/envs/environment.yaml

    # Step 5: Show environment info
    - name: Show environment
      shell: bash -el {0}
      run: |
        conda config --add envs_dirs ${HOME}/miniforge3/envs
        conda info --envs
        conda activate pypsa-china
        mamba info
        mamba list | head -100
        python -V
        pytest --version

    # Step 6: Run tests
    - name: Run pytest
      shell: bash -el {0}
      run: |
        conda activate pypsa-china
        pytest -v -s
